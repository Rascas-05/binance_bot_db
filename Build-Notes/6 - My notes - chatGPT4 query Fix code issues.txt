6 - My notes - chatGPT4 query Fix code issues


fix def get_latest_price(client, code):
    try:
        latest_price = client.get_historical_klines(code, Client.KLINE_INTERVAL_1MINUTE, "1 minute ago UTC")
        print(latest_price)
    except Exception as BinanceAPIException:
            # To do -> Log error -> log.json
            print(f"Error: {BinanceAPIException}")
    return

#print(get_latest_price(client, "BTCUSDT"))

# Sample Binance kline:
#[[0], [1], [2], [3], [4], [5], [6], [7], [8], [9], [10], [11]]
#[[1732411740000, '98102.00000000', '98102.01000000', '98102.00000000', '98102.01000000', '0.01783000', 1732411799999, #'1749.15866370', 2, '0.00037000', '36.29774370', '0']]
def prettify_binance_response(kline):
    return {
        "open_time": datetime.fromtimestamp(datetime.timezone.utc)(int(str(kline[0])[:10])).strftime("%Y-%m-%d %H:%M:%S"),
        "open": kline[1],
        "high": kline[2],
        "low": kline[3],
        "close": kline[4],
        "volume": kline[5],
        "close_time": datetime.fromtimestamp(datetime.timezone.utc)(int(str(kline[6])[:10])).strftime("%Y-%m-%d %H:%M:%S"),
        "quote asset volume": kline[7],
        "number of trades": kline[8],
        "Taker buy base asset volume": kline[9],
        "Taker buy quote asset volume": kline[10]
    }		

print(prettify_binance_response(get_latest_price(client, "BTCUSDT")))
=========================================================================
=========================================================================

It looks like you're trying to fetch the latest price for a given cryptocurrency pair (like `BTCUSDT`) using the Binance API, and then prettify the response. However, there are a couple of issues in your code that need fixing. I'll break down and address the issues to get everything working properly:

### Key Issues:
1. **`BinanceAPIException` is incorrectly used in the `except` block.**
   - The exception variable should be named just `e` (or any name you prefer), not `BinanceAPIException`. You need to capture the exception message using the exception object.

2. **`datetime.fromtimestamp` is incorrectly used.**
   - You are passing `datetime.timezone.utc` inside the `fromtimestamp` function, which is incorrect. The correct approach is to use `datetime.utcfromtimestamp()`.

3. **Function `get_latest_price()` does not return any value.**
   - The function should return the price, or a formatted response. You’re returning `None` because `return` is not properly set.

### Updated Code

```python
import logging
from binance.client import Client
from binance.exceptions import BinanceAPIException
from datetime import datetime

# Initialize the Binance API client
api_key = 'your_api_key'
api_secret = 'your_api_secret'
client = Client(api_key, api_secret)

# Set up the logger to log errors in JSON format
class JsonLogFormatter(logging.Formatter):
    def format(self, record):
        log_message = {
            'time': self.formatTime(record, self.datefmt),
            'level': record.levelname,
            'message': record.getMessage(),
            'exception': record.exc_info,
        }
        return json.dumps(log_message)

logger = logging.getLogger('binance_logger')
logger.setLevel(logging.ERROR)

# Create file handler that logs error messages
file_handler = logging.FileHandler('log.json')
file_handler.setLevel(logging.ERROR)

# Set custom formatter
formatter = JsonLogFormatter()
file_handler.setFormatter(formatter)

# Add file handler to logger
logger.addHandler(file_handler)

# Function to fetch the latest price (Kline data) from Binance
def get_latest_price(client, code):
    try:
        # Get the historical kline (candlestick) data
        latest_price = client.get_historical_klines(code, Client.KLINE_INTERVAL_1MINUTE, "1 minute ago UTC")
        # Return the prettified response
        return prettify_binance_response(latest_price[0])  # Get the first kline in the response
    except BinanceAPIException as e:
        logger.error(f"Binance API Error: {str(e)}", exc_info=True)
        print(f"Error: {str(e)}")
    except Exception as e:
        logger.error(f"General Error: {str(e)}", exc_info=True)
        print(f"Error: {str(e)}")
    return None

# Function to prettify the kline data (convert to a more readable format)
def prettify_binance_response(kline):
    return {
        "open_time": datetime.utcfromtimestamp(int(str(kline[0])[:10])).strftime("%Y-%m-%d %H:%M:%S"),
        "open": kline[1],
        "high": kline[2],
        "low": kline[3],
        "close": kline[4],
        "volume": kline[5],
        "close_time": datetime.utcfromtimestamp(int(str(kline[6])[:10])).strftime("%Y-%m-%d %H:%M:%S"),
        "quote_asset_volume": kline[7],
        "number_of_trades": kline[8],
        "taker_buy_base_asset_volume": kline[9],
        "taker_buy_quote_asset_volume": kline[10]
    }

# Example call to get and prettify the latest price for BTCUSDT
response = get_latest_price(client, "BTCUSDT")
if response:
    print(response)
```

### Breakdown of Fixes:

1. **Exception Handling**:
   - In the `except` block, I’ve replaced `BinanceAPIException` with `e` so that it correctly catches and logs the exception.
   - The `logger.error()` function logs the exception details in `log.json`.

2. **Datetime Conversion**:
   - I used `datetime.utcfromtimestamp()` to correctly convert the timestamps (`kline[0]` and `kline[6]`) to human-readable UTC time.

3. **Return Value**:
   - I ensured that `get_latest_price()` returns the prettified response, so that you can print or use the parsed data in your application.
   - `get_latest_price(client, "BTCUSDT")` now correctly returns the formatted kline data (the first kline data in the response).

4. **Logging**:
   - The logger writes errors to a JSON file (`log.json`) when exceptions occur, which is handled by the `JsonLogFormatter`.

### Sample Output:
When you call `get_latest_price(client, "BTCUSDT")`, if successful, the output might look like this:

```json
{
  "open_time": "2024-11-24 13:05:00",
  "open": "98102.00000000",
  "high": "98102.01000000",
  "low": "98102.00000000",
  "close": "98102.01000000",
  "volume": "0.01783000",
  "close_time": "2024-11-24 13:06:00",
  "quote_asset_volume": "1749.15866370",
  "number_of_trades": 2,
  "taker_buy_base_asset_volume": "0.00037000",
  "taker_buy_quote_asset_volume": "36.29774370"
}
```

If there's an error (e.g., invalid API key, connection issue), it will be logged in `log.json`.

Let me know if you need further assistance or modifications!

---------------------------------------------------------------
==================================================================
Fix DeprecationWarning
DeprecationWarning: datetime.datetime.utcfromtimestamp() is deprecated and scheduled for removal in a future version. Use timezone-aware objects to represent datetimes in UTC: datetime.datetime.fromtimestamp(timestamp, datetime.UTC).
  "open_time": datetime.utcfromtimestamp(int(str(kline[0])[:10])).strftime("%Y-%m-%d %H:%M:%S"),

def prettify_binance_response(kline):
    return {
        "open_time": datetime.utcfromtimestamp(int(str(kline[0])[:10])).strftime("%Y-%m-%d %H:%M:%S"),
        "open": kline[1],
        "high": kline[2],
        "low": kline[3],
        "close": kline[4],
        "volume": kline[5],
        "close_time": datetime.utcfromtimestamp(int(str(kline[6])[:10])).strftime("%Y-%m-%d %H:%M:%S"),
        "quote_asset_volume": kline[7],
        "number_of_trades": kline[8],
        "taker_buy_base_asset_volume": kline[9],
        "taker_buy_quote_asset_volume": kline[10]
    }

-----------------------
To fix the `DeprecationWarning` regarding the usage of `utcfromtimestamp()` in your code, we should switch to using `datetime.fromtimestamp()` with `datetime.timezone.utc` to ensure that the datetime objects are timezone-aware and correctly represent UTC.

Here’s the updated code that handles this deprecation warning:

### Fix for the DeprecationWarning

```python
from datetime import datetime, timezone

def prettify_binance_response(kline):
    return {
        "open_time": datetime.fromtimestamp(int(str(kline[0])[:10]), tz=timezone.utc).strftime("%Y-%m-%d %H:%M:%S"),
        "open": kline[1],
        "high": kline[2],
        "low": kline[3],
        "close": kline[4],
        "volume": kline[5],
        "close_time": datetime.fromtimestamp(int(str(kline[6])[:10]), tz=timezone.utc).strftime("%Y-%m-%d %H:%M:%S"),
        "quote_asset_volume": kline[7],
        "number_of_trades": kline[8],
        "taker_buy_base_asset_volume": kline[9],
        "taker_buy_quote_asset_volume": kline[10]
    }
```

### Explanation of Changes:
1. **`datetime.fromtimestamp()` with `tz=timezone.utc`**:
   - Instead of using `utcfromtimestamp()` (which is deprecated), we use `datetime.fromtimestamp(timestamp, tz=timezone.utc)` to make the resulting `datetime` object timezone-aware and in UTC.
   
2. **Timezone-aware datetime objects**:
   - The `tz=timezone.utc` argument ensures that the resulting datetime objects represent the UTC timezone, resolving the deprecation warning.

### Example Output:
Now, the code should work without the deprecation warning, and you will receive timezone-aware datetime objects for both `open_time` and `close_time`.

```python
{
  "open_time": "2024-11-24 13:05:00",
  "open": "98102.00000000",
  "high": "98102.01000000",
  "low": "98102.00000000",
  "close": "98102.01000000",
  "volume": "0.01783000",
  "close_time": "2024-11-24 13:06:00",
  "quote_asset_volume": "1749.15866370",
  "number_of_trades": 2,
  "taker_buy_base_asset_volume": "0.00037000",
  "taker_buy_quote_asset_volume": "36.29774370"
}
```

### Conclusion:
By using `datetime.fromtimestamp()` with `timezone.utc`, we avoid the deprecated `utcfromtimestamp()` method and ensure that the code remains forward-compatible with future versions of Python.