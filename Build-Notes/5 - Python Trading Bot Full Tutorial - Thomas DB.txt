5 - Requesting the latest prices from Binance API - Python Trading Bot Full Tutorial - Thomas DB
https://www.youtube.com/watch?v=xv6_-XRD7hM

Welcome to python-binance v1.0.19
This is an unofficial Python wrapper for the Binance exchange REST API v3. I am in no way affiliated with Binance, use at your own risk.
https://python-binance.readthedocs.io/en/latest/

The Python-Binance module provides the connections and the functions to obtain information from Binance exchange.

#Guides by developer of Binance-Python library
https://sammchardy.github.io/

Create file "trading_bot.py" in same folder as ".env" file otherwise the API keys won't load in my code changes to hide the API keys.

#Connect to Binance test net
#To use the Spot or Vanilla Options Testnet, pass testnet=True when creating the client.
Add API key from Bianance

PS C:\Users\bfvdi\Documents\AppDevelopment\VSCODE\Projects\Binance-API-Python> py
Python 3.12.4 (tags/v3.12.4:8e8a4ba, Jun  6 2024, 19:30:16) [MSC v.1940 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
---Terminal---
(.venv) PS C:\Users\bfvdi\Documents\AppDevelopment\VSCODE\Projects\Django\Thomas-DB\binance_bot_db> pip list
Package Version
------- -------
pip     24.3.1 
(.venv) PS C:\Users\bfvdi\Documents\AppDevelopment\VSCODE\Projects\Django\Thomas-DB\binance_bot_db>
(.venv) PS C:\Users\bfvdi\Documents\AppDevelopment\VSCODE\Projects\Django\Thomas-DB\binance_bot_db> pip list
Package            Version
------------------ -----------
aiohappyeyeballs   2.4.3      
aiohttp            3.11.6     
aiosignal          1.3.1      
attrs              24.2.0
certifi            2024.8.30
charset-normalizer 3.4.0
dateparser         1.2.0
frozenlist         1.5.0
idna               3.10
multidict          6.1.0
pip                24.3.1
propcache          0.2.0
pycryptodome       3.21.0
python-binance     1.0.22
python-dateutil    2.9.0.post0
pytz               2024.2
regex              2024.11.6
requests           2.32.3
six                1.16.0
tzdata             2024.2
tzlocal            5.2
ujson              5.10.0
urllib3            2.2.3
websockets         14.1
yarl               1.17.2
(.venv) PS C:\Users\bfvdi\Documents\AppDevelopment\VSCODE\Projects\Django\Thomas-DB\binance_bot_db>
-------------- 
Create new folder "trading_bot" in root folder.

# Store your passwords/API keys in ".env" instead of your python code.
create new file <project_folder>\.env
----.env----
BINANCE_API_KEY_Testnet = '<insert your Biance Public API key here>'
BINANCE_API_SECRET_Testnet = '<insert your Biance Secret API key here>'
API_Key_Date = ""
TESTNET=True

# Add files/folders to ".gitignore" that you don't want on your GitHub repository
---------------------------

create new file create new file <project_folder>\.gitignore
---------------------------
----.gitignore----
.venv
-env

---Terminal----
pip install python-dotenv
(.venv) PS C:\Users\bfvdi\Documents\AppDevelopment\VSCODE\Projects\Django\Thomas-DB\binance_bot_db> pip install python-dotenv
Collecting python-dotenv
  Using cached python_dotenv-1.0.1-py3-none-any.whl.metadata (23 kB)
Using cached python_dotenv-1.0.1-py3-none-any.whl (19 kB)
Installing collected packages: python-dotenv
Successfully installed python-dotenv-1.0.1
(.venv) PS C:\Users\bfvdi\Documents\AppDevelopment\VSCODE\Projects\Django\Thomas-DB\binance_bot_db> pip list
Package            Version
------------------ -----------
aiohappyeyeballs   2.4.3      
aiohttp            3.11.6     
aiosignal          1.3.1      
attrs              24.2.0     
certifi            2024.8.30  
charset-normalizer 3.4.0      
dateparser         1.2.0      
frozenlist         1.5.0      
idna               3.10       
multidict          6.1.0      
pip                24.3.1     
propcache          0.2.0      
pycryptodome       3.21.0     
python-binance     1.0.22     
python-dateutil    2.9.0.post0
python-dotenv      1.0.1      
pytz               2024.2     
regex              2024.11.6
requests           2.32.3
six                1.16.0
tzdata             2024.2
tzlocal            5.2
ujson              5.10.0
urllib3            2.2.3
websockets         14.1
yarl               1.17.2
(.venv) PS C:\Users\bfvdi\Documents\AppDevelopment\VSCODE\Projects\Django\Thomas-DB\binance_bot_db> 
Update----trading_bot.py----
from binance.client import Client

#*****Start My code*****
# importing os module for environment variables
import os
# importing necessary functions from dotenv library
from dotenv import load_dotenv, dotenv_values 
from datetime import datetime
import json

# loading variables from .env file
load_dotenv() 

# accessing API keys
# Note .env file should be in the same directory as trading_bot.py
net = os.getenv("TESTNET")
print(net)

# if os.getenv("TESTNET") == "True":
#     print("Using Binance Testnet")
# else:
#     print("Using Binance Mainnet")
    
BINANCE_API_KEY = os.getenv("BINANCE_API_KEY")
BINANCE_API_SECRET = os.getenv("BINANCE_API_SECRET")
#test key
# to do: comment out print Keys
#print(BINANCE_API_KEY)
#print(BINANCE_API_SECRET)
client = Client(BINANCE_API_KEY,BINANCE_API_SECRET)

# Create file data.json?
if not os.path.exists("data.json"): 
    data = {}
    #data['API_KEY_DATE'] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    #data['API_KEY_EXPIRES'] = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    #data['API_KEY_DATE'] = os.getenv("BINANCE_API_KEY_DATE")
    
    data['API_KEY_DATE'] = os.getenv("BINANCE_API_KEY_DATE")
    data['API_KEY_EXPIRES'] = os.getenv("BINANCE_API_KEY_EXPIRES")
    
    data['TESTNET'] = os.getenv("TESTNET")
    print("data.json file created")
    # write data to data.json file
    with open("data.json", "w") as f:
        json.dump(data, f)

#Check we can open data.json file  
try:
  with open("data.json") as f:
    data = json.load(f)
    print("Reading data from data.json file")
    print(data.get('API_KEY_DATE'))
    print(data.get('API_KEY_EXPIRES'))
    print(data.get('TESTNET'))
    f.close()  
except:
    print("Something went wrong when opening file data.json")
finally:
    f.close()

# open file log.json
# with open('log.json') as f:
#     data = json.load(f)
#     #print(data.get('API_KEY_DATE'))
#     if data.get('API_KEY_DATE') == "NULL":
#         print("API_KEY_DATE is None")
#     else:
#         # Check Binance API Key expiry date 
#         #print("API_KEY_DATE is not None")
#         print("To DO: Check Binance API Key expiry date")
#         print(data.get('API_KEY_DATE'))    
#*****End My code******
client = Client(BINANCE_API_KEY,BINANCE_API_SECRET)
==============
update-----.env-----
#Binance Testnet API keys
BINANCE_API_KEY = "<insert key"
BINANCE_API_SECRET = "<insert key>"
BINANCE_API_KEY_DATE = "2024-11-22"
#Binance API keys expire after 90 days
#Biance sends email alert when API keys are about to expire
BINANCE_API_KEY_EXPIRES = "2025-02-20"
TESTNET = False
#API_KEY creation date and expiry dates  are also saved in log.json
=======================
Resume video #5: https://youtu.be/xv6_-XRD7hM?si=94RiOUjgjwBxUDRP&t=92
----trading_bot.py----
client = Client(BINANCE_API_KEY,BINANCE_API_SECRET)

response= client.get_historical_klines("BTCUSDT", Client.KLINE_INTERVAL_5MINUTE, "1 minutes ago UTC")

print(response)
----update trading_bot.py----

client = Client(BINANCE_API_KEY,BINANCE_API_SECRET)

for x in range(10):
    response= client.get_historical_klines("BTCUSDT", Client.KLINE_INTERVAL_1MINUTE, "1 minutes ago UTC")
    print(response)
    time.sleep(60)

----terminal---
PS C:\Users\bfvdi\Documents\AppDevelopment\VSCODE\Projects\Django\Thomas-DB\binance_bot_db> & c:/Users/bfvdi/Documents/AppDevelopment/VSCODE/Projects/Django/Thomas-DB/binance_bot_db/.venv/Scripts/python.exe c:/Users/bfvdi/Documents/AppDevelopment/VSCODE/Projects/Django/Thomas-DB/binance_bot_db/trading_bot.py
a85a67Testnet .env = True 
data.json file created
Reading data from data.json file
2024-11-22
2025-02-20
True
[[1732253700000, '98912.90000000', '98912.91000000', '98874.79000000', '98874.80000000', '6.96972000', 1732253999999, '689281.99692850', 1223, '1.18620000', '117297.66367830', '0']]

[[time utc format, Open Price    , High Price      , Low price       , Close Price     , 	     ,time utc format			
[[1732260000000, '99121.21000000', '99121.22000000', '99100.00000000', '99100.00000000', '1.94359000', 1732260299999, 
'192628.39363250', 632, '0.49132000', '48693.74542940', '0']]
==============
Note 1. Close price may not be the final close price for the current candle.
Note 2. Testnet candle data/prices may not be in sync with mainnet.


Next video
6 - Create reusable functions - Python Trading Bot Full Tutorial (Python, Django, Binance)
https://www.youtube.com/watch?v=oPxmHXVuHe4